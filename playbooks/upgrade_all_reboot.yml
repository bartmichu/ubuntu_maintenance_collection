- name: Ubuntu Maintenance Collection - Upgrade packages and reboot if needed and allowed
  hosts: all
  gather_facts: true

  tasks:

    - name: Gather the package facts
      become: false
      ansible.builtin.package_facts:
        manager: apt

    - name: Update package repositories cache
      ansible.builtin.include_role:
        name: packages_update_cache

    - name: Install needrestart releated packages
      when: "'needrestart' not in ansible_facts.packages"
      ansible.builtin.include_role:
        name: packages_needrestart

    - name: Check for available package upgrades
      ansible.builtin.include_role:
        name: packages_upgrade_check

    - name: Display available package upgrades
      when: ((umc_upgradeable_packages | default([])) | length > 0) or ((umc_upgradeable_packages_security | default([])) | length > 0)
      become: false
      ansible.builtin.debug:
        msg:
          "{% if (umc_upgradeable_packages_security | length > 0) %}PENDING SECURITY UPGRADES: {{ umc_upgradeable_packages_security | length }} ({{ umc_upgradeable_packages_security | join(', ') }}). {% endif %}\
          {% if (umc_upgradeable_packages | length > 0) %}PENDING UPGRADES: {{ umc_upgradeable_packages | length }} ({{ umc_upgradeable_packages | join(', ') }}). {% endif %}"

    - name: Upgrade all packages
      when: (umc_upgradeable_packages | length > 0) or ((umc_upgradeable_packages_security | default([])) | length > 0)
      ansible.builtin.include_role:
        name: packages_upgrade_all

    - name: Check if system reboot is required
      ansible.builtin.include_role:
        name: system_reboot_check

    - name: Check if service restart is required
      ansible.builtin.include_role:
        name: services_restart_check

    - name: Display list of services that need to be restarted
      when: umc_services_to_restart | length > 0
      become: false
      ansible.builtin.debug:
        msg: "SERVICES TO RESTART: {{ umc_services_to_restart | length }} ({{ umc_services_to_restart | join(', ') }})"

    - name: Ensure that required facts are defined outside Jinja
      ansible.builtin.set_fact:
        umc_reboot_allowed: "{{ umc_reboot_allowed | default(False) }}"
        umc_services_reboot: "{{ umc_services_reboot | default(False) }}"

    - name: Display upgrade and restart summary
      when: ((umc_upgradeable_packages | default([])) | length > 0)
            or ((umc_services_to_restart | length) > 0)
            or (umc_reboot_needed | default(False))
      become: false
      ansible.builtin.debug:
        msg:
          "PACKAGES: {{ umc_upgrade_summary | default('NONE UPGRADED.') }} \
          {% if (umc_services_to_restart | length > 0) %}SERVICES TO RESTART: {{ umc_services_to_restart | length }} ({{ umc_services_to_restart | join(', ') }}). {% endif %}\
          {% if umc_reboot_needed %}REBOOT IS NEEDED {{ 'AND ALLOWED' if umc_reboot_allowed else 'BUT NOT ALLOWED' }}. {% endif %}\
          {% if (not umc_reboot_needed and (umc_services_reboot and (umc_services_to_restart | length > 0))) %}REBOOT IS NEEDED {{ 'AND ALLOWED' if umc_reboot_allowed else 'BUT NOT ALLOWED' }}.{% endif %}"

    - name: Announce system reboot requirement
      when: (umc_reboot_needed | default(False))
            or ((umc_services_reboot | default(False)) and ((umc_services_to_restart | default([])) | length > 0))
      become: false
      ansible.builtin.debug:
        msg: "SYSTEM REBOOT IS NEEDED{{ ' BUT NOT ALLOWED' if umc_reboot_allowed == False }}"

    - name: Reboot block
      when: ((umc_reboot_needed | default(False)) or ((umc_services_reboot | default(False)) and ((umc_services_to_restart | default([])) | length > 0)))
              and (umc_reboot_allowed | default(False))
      block:

        - name: Perform system reboot
          ansible.builtin.include_role:
            name: system_reboot

        - name: Confirm successful system reboot
          become: false
          ansible.builtin.debug:
            msg: "SYSTEM WAS SUCCESSFULLY REBOOTED"
          failed_when: not (umc_reboot_successfull | default(False))
